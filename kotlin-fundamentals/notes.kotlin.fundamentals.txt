Going w/ project Simple002

Installation/intro
Object-oriented features
Functional language features
Higher order functions
Filtering and mapping data
Nullability
Working with infinite streams
Improved support for generics

Installing Kotlin: I just use gradle
Or sdkman
"sdkman current"
running "kotlinc" gives a repl
leave repl with ":quit"
":help" for help
Files have a .kt extension
In Kotlin: argument name, then type
fun main(args: Array< String > ) {
    print( "Hello world" )
}
Don't need a class. No need to specify a return. 
Return void is done w/Unit

compile with 
kotlinc Hello.kt
Give you HelloKt.class
kotlinc hello.kt -include-runtime -d hello.jar
This tells the compiler to include the runtime
Then you can run the jar w/java -jar hello.jar
Easy to distribute

What is Kotlin?
JVM language
Object Oriented
Functional
less ceremony than Java

Creating a function outside of a class did not work for me
In Person class:
var Name: String = ""
name of var, then the type
it must be initialized

No "new" keyword

var is mutable, val is not

Constructor in class definition:

// This has a constructor in the definition
// we do not need to put fName in the class
class SecondPerson ( var fName: String )  {
}
What if you want multiple constructors?

String interpolation in Kotlin:
println( "Display: $fName"  )

public is default behavior in Kotlin

I am using PersonRunner because I want to work with classes

He says there is less ceremony than in Java, but I feel like I am spending a lot of time dealing w/IntelliJ

I hope that "module" does not have some meaning in Kotlin.

Module03:
Less ceremony,
Exception handling is better
Language features: immutable types, string interpolation, looping constructs, expressions, ranges

Is not using classes a common thing?
How are things arranged?
Kotlin will make a class around our function
For now, I think I will stick with classes. Is not working with classes how Kotlin dev do things?
Maybe by using classes I am missing the point, but that is what I am used to.

He goes through all this trouble. Isn't that the point of Gradle?

var is variable
val is immutable
Immutability is good

Just doing things like q.Answer = "Hh" is like adding a Java property
Kotlin creates getters and setters. What about validation for your getters?
If a function does not return anything, can we skip saying it returns "Unit"?

Interpolation for a local variable: println( "Hello $name" )
Calling from elsewhere: println( "Hello ${person.name}" )

You can do a string comparison with "=="

You can set a variable like this:
var message2 = if ( q.Answer == q.CorrectAnswer ) {
            "You were correct, but not as smart as you think you are"
        } else {
            "Thank you for not being a mindless conformist"
        }
so "if" is an expression that can return a var or val

If you try
q.Answer = null
You get this message:
"Null can not be a value of a non-null type String"
So you cannot make something null unless you tell the compiler it can be null. Add a question mark
This cannot be null:
var Answer:String = "Something"
This can be null:
var Answer:String? = null
You can also do that when you instantiate a class:
val q:Question? = Question()
But then you have to either test
or when you use q, do this:
q?.Answer = "33"
q?.display()
Groovy does the same thing
so it's safe
so to review:
null-safe instantiation:
val q:Question? = Question()
null-safe methods:
q?.display()

No "switch" in Kotlin
Has a "when"

if ( Answer == CorrectAnswer ) {
    print( "You are correct" )
} else {
    print( "Try again" )
}
same as:
when ( Answer ) {
    CorrectAnswer -> print( "You are correct, sir" )
    else -> print( "Try again" )
}

also:
when ( Answer ) {
    CorrectAnswer -> print( "You are correct, sir" )
    else -> {
        print( "Try again" )
        print( "; we can do multiple lines" )
    }
}

"try" is also an expression
val number:Int = try {
    Integer.parseInt( q.Answer )
} catch ( e:NumberFormatException ) {
    -1
}
or make number possible null:
val number:Int? = try {
    Integer.parseInt( q.Answer )
} catch ( e:NumberFormatException ) {
    null
}

Kotlin has "while" and "do...while"
For loops are a bit different
We have ranges
var myvalues = 1..10
for( i in 1..10 ) {
    println( "i is $i" )
}
prints 1 through 10
for( i in 1..10 step 2 ) {
    println( "i is $i" )
}
This will print the odd numbers
We can also go backwards
for ( i in 10 downTo 1 step 2 ) {
}
Those are inclusive ranges: includes beginning and end
java usually simulates ranges without ending: i = 0; i < 10
To not include the end, use "until"
for ( i in 1 until 10 )
That is a half-closed range
To create a list, use "listOf" function
var numbers = listOf( 1, 2, 3, 4, 5 )
for ( i in numbers ) {
}
Or
for ( ( index, element ) in numbers.withIndex() ) {
    println( "$element at $index" )
}
We can use for over maps
var ages = TreeMap< String, Int >()
ages[ "Kevin" ] = 55
ages[ "Sam" ] = 24
ages[ "Alex" ] = 24
ages[ "Henry" ] = 26
for ( ( name, age ) in ages ) {
    println( "$name is $age" )
}
I think TreeMap keeps things in order

You can range over strings, character values, anything that implements the Comparable interface

He mentions that Java7 has try-with-resources statement (which closes resources afterwards, so no need for finally)
Kotlin has something similar
We will get to that later

chapter 4: Functions in Kotlin (not the "functional" part)
Functions do not need to be part of a class
functions introduced by "fun" keyword
can have default parameter values
can have named parameters
can "extend" existing types (like metaprogramming?)

fun connect( addr: URI ) : Boolean {
}
parameter name followed by parameter type
If there is no return type, you can just leave it off

functions can be in the default package

function expressions:
functions that are a single line of code

fun max( a: Int, b:Int ): Int = if ( a > b ) a else b

Even if you have a Kotlin function in default package, you can still call it Java
Java class info.shelfunit.tutorial.AppRunner calls ProgramKt.newDisplay as a static function

You can give your Kotlin class a better name w/@file:JvmName( INSERT_STRING_HERE ) annotation

Default parameters
Like Groovy
fun connect( addr: URI, useProxy: Boolean = true ) : Boolean
So you can just call it w/only the first param
So if you add a param to a function later, your code will not break
Java does not have default params, so you have to call all the params
or add @JvmOverloads
compile will generate extra functions

named parameters: You can use names, and change order
so for fun connect( addr: URI, useProxy: Boolean = true ) : Boolean
connect( URI( someAddress ), useProxy = false )
You cannot mix named and positional args
This can be good if you have to call a function with a lot of params

Extension functions:
Is this like metaprogramming?
or method injection in groovy
In Kotlin, you can add static functions
We could just make our own classes w/static functions
We can cut down on use of utility classes
Makes code easier to read
Here is a function:
fun replaceMultipleWhitespace( value: String ) : String {
    var regex = Regex( "\\s+" )
    return regex.replace( value, " " )
}
Now add it to String:
fun String.replaceMultipleWhitespace( value: String ) : String {
    var regex = Regex( "\\s+" )
    return regex.replace( value, " " )
}
You could do it this way:
fun String.replaceMultipleWhitespace( ) : String {
    var regex = Regex( "\\s+" )
    return regex.replace( this, " " )
}

Infix functions:
Member or extension parameter,
has a single parameter
marked w/infix keyword
infix fun Header.plus( Header other ) : Header { ... }
h1, h2, h3: Header
h3 = h1 plus h2
no need for brackets

Operator overloading:
only a small set can be overloaded:
Unary: + - ! ++ --
Binary: + - * / %
+= -= *= /= %=
in [] () == !=
> < >= <=

Then we could make an infix function called, say, "plus"
and use "operator" keyword
So I guess the name of the function has to be the same as the name of the operator
Don't over use overloading.
You'll get.....wait for it.....overloaded
good for DSLs

allows tail-recursive functions
functional languages use a lot of recursion
I thought the JVM could not do tail recursion
uses "tailrec" keyword
They must have the correct form
Kotlin optimizes away the recursion
It turns it into a loop

Module 5: Types
Interfaces
Classes
Inheritance
Construction
Data Classes

Interfaces:
Can have default methods, and properties (doesn't Java do that too?)
Just like Java
Interfaces are public by default (same w/classes)
We made interface Time
and a class that implements it: YetiTime
You do this:
class YetiTime : Time
Colon is used for both "implements" and "extends" (frankly I prefer words over punctuation)
But you need to add "override" in front of function when you implement it

If we implement multiple interfaces and they have methods w/same name, we can pick one
interface A { fun doSomething() = {} }
interface B { fun doSomething() = {} }
class Foo : A, B {
    override fun doSomething() = {
        super< A >.doSomthing()
    }
}

We could also call both parent interfaces' methods

Classes
Classes in Kotlin are public and final by default (good idea to make classes final by default in Java)
Supports "abstract" classes
Sealed classes
Constructors - can have multiple constructors
Data classes - "only to manipulate data" (don't all classes do that?)

classes and methods are final by default
To allow derivation, use "open" keyword
open class Student : Person {
    open fun getClasses() {
        // code
    }
}

classes can also be abstract
For abstract class, you can have abstract functions that child classes must implement
Can have open and closed functions (closed functions are functions that parent abstract class implements)

visibility: default is public (in java it's "package private", visible to everything in that package)
Kotlin does have "internal" keyword - makes class visible to everything in that "module"
it does have "protected" and "private"

Sealed classes:
used to restrict class hierarchies
"enums on steriods"
You limit what can derive from a class
sealed class Event {
    class SendEvent( id : Int, to: String ) : Event()
    class ReceiveEvent( id: Int, from: String ) : Event()
}
processed with "when" keyword
fun handleEvent( e : Event ) =
    when( e ) {
        is SendEvent    -> print( e. to )
        is ReceiveEvent -> print( e.from )
    }

That code could get messy if multiple ENTIRE classes have to be in one file

Class can have a primary constructor in same line that declares the class
open class Person( val name : String ) {
    // other stuff
}

what about validation?
You don't need "new" to instantiate
Just do this:
val kevin = Person( "Kevin" )

other ways to set up primary constructor:
open class Person( name : String ) {
    val name : String
    init {
        this.name = name
    }
}
open class Person( _name : String ) {
    val name = _name
}

secondary constructors:
open class Person( name : String ) {
    constructor( name : String, age: Int ) : this( name ) // initialize the primary constructor
}
prefer default
open class Person( name : String, age = 0 ) {
}

Calling superclass constructors:
class Student( name : String ) : Person( name )
or
class Student : Person {
    constructor( name : String ) : super( name )
}

derived classes must call parent's default constructor if parent has one
open class Person
class Student : Person()

private constructors are supported
used to inhibit constructions (such as a singleton)
In Kotlin, a better way

class Student( val id : Int ) : Person() {
    override fun getName() : String {
        return ""
    }
    override fun getAddress(): String {
        return ""
    }
}

class Student( _id : Int ) : Person() {
    val id = _id
    override fun getName() : String {
        return ""
    }
    override fun getAddress(): String {
        return ""
    }
}

class Student( _id : Int ) : Person() {
    val id : Int
    init {
        id = _id
    }
    override fun getName() : String {
        return ""
    }
    override fun getAddress(): String {
        return ""
    }
}

If you have an arg in secondary constructor but not primary, initialize it in "init" function

Data classes:
We need to store stuff in collections, need correct implementation of equals, hashCode, toString
We may just store data in a class, like DTOs
Data classes can provide equals, hashCode, toString
usually immutable
Kotlin generates "copy" keyword to copy classes
Like Groovy annotations
data class Meeting( val name : String, val location : String )
val aMeeting = Meeting( "A Meeting", "London" )
// we can copy a class and also change one of the fields
val anotherMeeting = aMeeting.copy( location = "New York" )

Module 6
Companion objects
Kotlin does not have static methods
we can have singletons w/"object" keyword
static functions are effectively singletons
use of "companion object" allows to get equivalent of static methods
"object" keyword defines a class and creates an instance
has properties, methods, initializers
cannot have a constructor
object Meetings {
    var allMeetings = arrayListOf< Meeting >()
}
Meetings.allMeetings.add( someMeeting )

I notice he likes starting his val/var names with upper case letter. Is that something he does, or is that a Kotlin thing?
Singletons can make code harder to test

objects are just classes
objects can derive from other classes/interfaces (I think here he is taking about these Kotlin single objects in particular)
can be used where any "instance" is used
object CaseInsensitiveComparator : Comparator< File > {
    override fun compare(  ) : Int { }
}

objects can be declared inside a class
class Person {
    object CaseInsensitiveComparator : Comparator< File > {
        override fun compare(  ) : Int { }
    }
}

Kotlin classes do not have static members
companion objects: used for factory methods and static members
factories can hide complex initialization

static method:
class Person {
    companion object {
        fun main( args : Array< String > ) {
        }
    }
}

factories:
class Student {
    companion object {
        fun createUndergrad( name : String ) : Undergraduate { ... }
        fun createPostgrad( name : String ) : Postgraduate { ... }
    }
}

Student.createUndergrad( "Simon" ) // calling method on Student class, not an instance
Student.createPostgrad( "Doctor" )

Our Person class is getting complicated: companion objects, companion object implementing an interface,
constructors w/optional args

